import pandas as pd 
import sklearn.linear_model as lm
from sklearn.preprocessing import LabelEncoder
mydata=pd.read_csv("cancer.csv")
le=LabelEncoder()
mydata["diagnosis_enc"]=le.fit_transform(mydata[["diagnosis"]])
x=mydata[["radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean","compactness_mean","concavity_mean","concave points_mean","symmetry_mean","fractal_dimension_mean","radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se","concave points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst","concave points_worst","symmetry_worst","fractal_dimension_worst"]]
y=mydata[["diagnosis_enc"]]
model=lm.LinearRegression()
model.fit(x, y)
print("coefficient", model.coef_)
print("intercept", model.intercept_)
a = float(input("enter value of a:"))
b = float(input("enter value of b:"))
c = float(input("enter value of c:"))
d = float(input("enter value of d:"))
e = float(input("enter value of e:"))
f = float(input("enter value of f:"))
g = float(input("enter value of g:"))
h = float(input("enter value of h:"))
i = float(input("enter value of i:"))
j = float(input("enter value of j:"))
k = float(input("enter value of k:"))
l = float(input("enter value of l:"))
m = float(input("enter value of m:"))
n = float(input("enter value of n:"))
o = float(input("enter value of o:"))
p = float(input("enter value of p:"))
q = float(input("enter value of q:"))
r = float(input("enter value of r:"))
s = float(input("enter value of s:"))
t = float(input("enter value of t:"))
u = float(input("enter value of u:"))
v = float(input("enter value of v:"))
w = float(input("enter value of w:"))
x1 = float(input("enter value of x:"))
y1 = float(input("enter value of y:"))
z = float(input("enter value of z:"))
aa = float(input("enter value of aa:"))
ab = float(input("enter value of ab:"))
ac = float(input("enter value of ac:"))
ad = float(input("enter value of ad:"))
result=model.predict([[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x1, y1, z, aa, ab, ac, ad]])
if result > 0.5:
    print("cancerous cell")
else:
    print("non cancerous cell")